<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>idea 破解网址</title>
    <url>/2020/07/08/idea-%E7%A0%B4%E8%A7%A3%E7%BD%91%E5%9D%80/</url>
    <content><![CDATA[<p><a href="http://fls.jetbrains-agent.com" target="_blank" rel="noopener">http://fls.jetbrains-agent.com</a></p>
]]></content>
  </entry>
  <entry>
    <title>spark技术笔记</title>
    <url>/2020/06/23/spark%E6%8A%80%E6%9C%AF%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<h1 id="Spark的DataFrame中用explode将array数组转换成多行"><a href="#Spark的DataFrame中用explode将array数组转换成多行" class="headerlink" title="Spark的DataFrame中用explode将array数组转换成多行"></a>Spark的DataFrame中用explode将array数组转换成多行</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F;service_prod_code字段类型为array</span><br><span class="line">val df_info &#x3D; spark.sql(</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">      select</span><br><span class="line">        product, service_prod_code</span><br><span class="line">      from</span><br><span class="line">        tablename</span><br><span class="line">    &quot;&quot;&quot;.stripMargin)</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;使用explode会将原值中的null值删除掉，就是说，如果原来的array值为空的话，通过explode转换后，会直接删除掉这行数据，只保留array指不为空的数据</span><br><span class="line">val service_result &#x3D; df_info.withColumn(&quot;service_explode&quot;, explode(col(&quot;service_prod_code&quot;)))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;想要保留array值为空的数据的话，可采用如下方法</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;spark 2.2+</span><br><span class="line">val service_result &#x3D; df_info.withColumn(&quot;service_explode&quot;, explode_outer(col(&quot;service_prod_code&quot;)))</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;spark &lt;&#x3D;2.1</span><br><span class="line">df.withColumn(&quot;service_explode&quot;, explode(</span><br><span class="line">  when(col(&quot;service_prod_code&quot;).isNotNull, col(&quot;service_prod_code&quot;))</span><br><span class="line">    &#x2F;&#x2F; If null explode an array&lt;string&gt; with a single null</span><br><span class="line">    .otherwise(array(lit(null).cast(&quot;string&quot;)))))</span><br></pre></td></tr></table></figure>

<p><a href="https://www.jianshu.com/p/605b83eda24a" target="_blank" rel="noopener">spark convert RDD[Map] to DataFrame</a></p>
<p><a href="https://blog.csdn.net/lukabruce/article/details/100666254" target="_blank" rel="noopener">spark之explode()方法— 行转列</a></p>
]]></content>
  </entry>
  <entry>
    <title>技术笔记-0621</title>
    <url>/2020/06/22/%E6%8A%80%E6%9C%AF%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<h1 id="5-30"><a href="#5-30" class="headerlink" title="5.30"></a>5.30</h1><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># pip代理安装</span></span><br><span class="line">pip install gunicorn --proxy=<span class="string">"http://10.57.22.219:3128/"</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#删除redis 所有键</span></span><br><span class="line">redis-cli keys <span class="string">"*18910869505*"</span> | xargs redis-cli <span class="keyword">del</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># gunicorn 部署服务</span></span><br><span class="line">gunicorn -w <span class="number">3</span> -b <span class="number">10.57</span><span class="number">.17</span><span class="number">.68</span>:<span class="number">8081</span> model.bioprecalservice:app</span><br></pre></td></tr></table></figure>

<h1 id="6-1"><a href="#6-1" class="headerlink" title="6.1"></a>6.1</h1><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#centos  安装supervisor</span></span><br><span class="line">source activate tf2(py3<span class="number">.6</span>)</span><br><span class="line"></span><br><span class="line">echo_supervisord_conf &gt; supervisored.conf</span><br><span class="line">sudo cp supervisored.conf  /etc/supervisor/</span><br><span class="line"></span><br><span class="line">mkdir -p /etc/supervisor/conf.d</span><br><span class="line"></span><br><span class="line"><span class="comment">#supervisored.conf 中增加</span></span><br><span class="line">[include]</span><br><span class="line">;files = relative/directory/*.ini</span><br><span class="line">files = conf.d/*.conf</span><br><span class="line"></span><br><span class="line">vim /etc/supervisor/conf.d/userfeaturesfromkafka.conf</span><br><span class="line"><span class="comment"># userfeaturesfromkafka.conf中增加</span></span><br><span class="line">[program:bioprobe_userfeaturesfromkafka]</span><br><span class="line"></span><br><span class="line">command=bash /home/tdops/pro/bioprobe/bioprobe_userfeaturesfromkafka.sh</span><br><span class="line"><span class="comment">#supervisor</span></span><br><span class="line">autostart=true</span><br><span class="line"></span><br><span class="line">autorestart=true</span><br><span class="line"></span><br><span class="line">startsecs=<span class="number">1</span></span><br><span class="line"></span><br><span class="line">stderr_logfile=/home/tdops/pro/bioprobe/model/log/bioprobe_stderr.log</span><br><span class="line">stdout_logfile=/home/tdops/pro/bioprobe/model/log/bioprobe_stdout.log</span><br><span class="line">; The [include] section can just contain the <span class="string">"files"</span> setting.  This</span><br><span class="line">; setting can list multiple files (separated by whitespace <span class="keyword">or</span></span><br><span class="line">; newlines).  It can also contain wildcards.  The filenames are</span><br><span class="line">; interpreted <span class="keyword">as</span> relative to this file.  Included files *cannot*</span><br><span class="line">; include files themselves.</span><br><span class="line"></span><br><span class="line"><span class="comment"># 书写脚本</span></span><br><span class="line">vim /home/tdops/pro/bioprobe/bioprobe_userfeaturesfromkafka.sh</span><br><span class="line"></span><br><span class="line">cd /home/tdops/pro/bioprobe</span><br><span class="line">source activate tf2</span><br><span class="line"><span class="keyword">exec</span> python -m model.userfeaturesfromkafka</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">[program:bioprobe_service]</span><br><span class="line"></span><br><span class="line">command=bash /home/tdops/pro/bioprobe/bioprobe_service.sh</span><br><span class="line"><span class="comment">#supervisor</span></span><br><span class="line">autostart=true</span><br><span class="line"></span><br><span class="line">autorestart=true</span><br><span class="line"></span><br><span class="line">startsecs=<span class="number">1</span></span><br><span class="line"></span><br><span class="line">stderr_logfile=/home/tdops/pro/bioprobe/model/log/bioprobe_service_stderr.log</span><br><span class="line">stdout_logfile=/home/tdops/pro/bioprobe/model/log/bioprobe_service_stdout.log</span><br><span class="line">; The [include] section can just contain the <span class="string">"files"</span> setting.  This</span><br><span class="line">; setting can list multiple files (separated by whitespace <span class="keyword">or</span></span><br><span class="line">; newlines).  It can also contain wildcards.  The filenames are</span><br><span class="line">; interpreted <span class="keyword">as</span> relative to this file.  Included files *cannot*</span><br><span class="line">; include files themselves.</span><br></pre></td></tr></table></figure>

<h1 id="6-16"><a href="#6-16" class="headerlink" title="6.16"></a>6.16</h1><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">创建topic：bin/kafka-topics.sh --create --topic testlouis --replication-factor 1 --partitions 1 --zookeeper localhost:2181 </span><br><span class="line"></span><br><span class="line">开启自动创建配置：auto.create.topics.enable=<span class="literal">true</span> </span><br><span class="line"></span><br><span class="line">查看有哪些topic：bin/kafka-topics.sh --list --zookeeper localhost:2181</span><br><span class="line"></span><br><span class="line">查看具体的topic详细信息：bin/kafka-topics.sh --zookeeper 127.0.0.1:2181 --topic lx_test_topic --describe</span><br><span class="line"></span><br><span class="line"><span class="comment">#启动kafka 服务</span></span><br><span class="line">$ ./bin/kafka-server-start.sh ./config/server.properties</span><br><span class="line">注意 kafka基于zookeeper，必须先启动zookeeper ，再启动kafka</span><br><span class="line"></span><br><span class="line">c.启动消费者</span><br><span class="line"></span><br><span class="line">$ ./bin/kafka-console-consumer.sh --bootstrap-server localhost:9092 --topic <span class="built_in">test</span>-behavior-data  --from-beginning</span><br><span class="line">d.启动生产者</span><br><span class="line"></span><br><span class="line">$ ./bin/kafka-console-producer.sh --broker-list localhost:9092 --topic <span class="built_in">test</span></span><br><span class="line">整体效果如下图，窗口上是我启动的消费窗口 ，窗口下是我启动的生产者窗口：</span><br></pre></td></tr></table></figure>

<h1 id="6-17"><a href="#6-17" class="headerlink" title="6.17"></a>6.17</h1><h2 id="Jupyter-安装内核"><a href="#Jupyter-安装内核" class="headerlink" title="Jupyter 安装内核"></a>Jupyter 安装内核</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1.查看安装的内核和位置</span><br><span class="line"></span><br><span class="line">jupyter kernelspec list</span><br><span class="line"></span><br><span class="line">2.进入安装内核目录打开kernel.jason文件，查看Python编译器的路径是否正确</span><br><span class="line"></span><br><span class="line">3.如果不正确移除该名字的kernel（假设叫做z1）或者不想要该kernel直接移除</span><br><span class="line"></span><br><span class="line">4.如果不正确，重新安装内核这里的z1就是在jupyter中显示的kernel名字，建议使用环境的名字。注意要进入你想要的对应环境中去使用上面的命令。</span><br><span class="line"></span><br><span class="line">source activate z1</span><br><span class="line">python -m ipykernel install --user --name tf2 --display-name &quot;tf2&quot;</span><br><span class="line">&#39;&#39;&#39;</span><br><span class="line"> 里面的有两个z1，前面的z1不能改变，一定是当前环境名称，后面的那个z1可以改变，是要显示的名字，其他部分固定不变</span><br><span class="line">&#39;&#39;&#39;</span><br><span class="line"></span><br><span class="line">如果显示“No module named ipykernel”，说明没有安装ipykernel，则在该环境下安装ipykernel： conda install ipykernel 然后重复上面的语句</span><br><span class="line"></span><br><span class="line">重启就完成了</span><br></pre></td></tr></table></figure>

<h2 id="树模型画图方法"><a href="#树模型画图方法" class="headerlink" title="树模型画图方法"></a>树模型画图方法</h2><p><a href="https://blog.csdn.net/l_xzm/article/details/81532281" target="_blank" rel="noopener">https://blog.csdn.net/l_xzm/article/details/81532281</a></p>
<h1 id="6-19"><a href="#6-19" class="headerlink" title="6.19"></a>6.19</h1><h2 id="typora-快捷键使用-mac"><a href="#typora-快捷键使用-mac" class="headerlink" title="typora 快捷键使用(mac)"></a>typora 快捷键使用(mac)</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">一级标题：⌘1 (command + 1)</span><br><span class="line">二级标题：⌘2 (command + 2)</span><br><span class="line">三级标题：⌘3 (command + 3)</span><br><span class="line">四级标题：⌘4 (command + 4)</span><br><span class="line">五级标题：⌘5 (command + 5)</span><br><span class="line"></span><br><span class="line">段落：⌘o 不生效，快捷键冲突，使用⌃o (control + o)</span><br><span class="line"></span><br><span class="line">提升标题级别：⌘&#x3D; (command + &#x3D;)</span><br><span class="line">降低标题级别：⌘- (command + -)</span><br><span class="line"></span><br><span class="line">表格：⌥⌘T (option + command + T)</span><br><span class="line">代码块：⌥⌘C (option + command + C)</span><br><span class="line">公式块：⌥⌘B (option + command + B)</span><br><span class="line"></span><br><span class="line">引用：⌥⌘Q (option + command + Q)</span><br><span class="line">有序列表：⌥⌘O (option + command + O)</span><br><span class="line">无序列表：⌥⌘U (option + command + U)</span><br><span class="line"></span><br><span class="line">任务列表：⌥⌘X (option + command + X)</span><br><span class="line">列表缩进：</span><br><span class="line"> 增加缩进：⌘] ( command + ])</span><br><span class="line"> 减少缩进：⌘[ ( command + [)</span><br><span class="line"></span><br><span class="line">链接引用：⌥⌘L (option + command + L)</span><br><span class="line">脚注：⌥⌘R (option + command + R)</span><br><span class="line"></span><br><span class="line">水平分割线：⇧⌘- (shift + command + -)</span><br><span class="line"></span><br><span class="line">加粗：⌘B (command + B)</span><br><span class="line">斜体：⌘I (command + I)</span><br><span class="line">下划线：⌘U (command + U)</span><br><span class="line"></span><br><span class="line">代码：⇧⌘(shift + command +)</span><br><span class="line"></span><br><span class="line">内联公式：⌃M (control + M)</span><br><span class="line">删除线：⌃~ (control + ~)</span><br><span class="line">注释：⌃- (control + -)</span><br><span class="line"></span><br><span class="line">超链接:⌘K (command + K)</span><br><span class="line">图像：⌃⌘I (control + command + U)</span><br><span class="line">清除样式：⌘\ (command + )</span><br><span class="line"></span><br><span class="line">显示&#x2F;隐藏侧边栏：⇧⌘L (shift + command + L)</span><br><span class="line">大纲视图：⌃⌘1 (control + command + 1)</span><br><span class="line">文档列表视图：⌃⌘2 (control + command +2)</span><br><span class="line">文件树视图：⌃⌘3 (control + command + 3)</span><br></pre></td></tr></table></figure>

<h2 id="jupyter-notebook-远程访问"><a href="#jupyter-notebook-远程访问" class="headerlink" title="jupyter notebook 远程访问"></a>jupyter notebook 远程访问</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1. 生成一个 notebook 配置文件</span><br><span class="line">默认情况下，配置文件 ~&#x2F;.jupyter&#x2F;jupyter_notebook_config.py 并不存在，需要自行创建。使用下列命令生成配置文件：</span><br><span class="line"></span><br><span class="line">jupyter notebook --generate-config</span><br><span class="line">1</span><br><span class="line">Writing default config to: &#x2F;root&#x2F;.jupyter&#x2F;jupyter_notebook_config.py</span><br><span class="line">1</span><br><span class="line">2. 生成密码</span><br><span class="line">自动生成</span><br><span class="line">从 jupyter notebook 5.0 版本开始，提供了一个命令来设置密码：jupyter notebook password，生成的密码存储在 jupyter_notebook_config.json。</span><br><span class="line"></span><br><span class="line">$ jupyter notebook password</span><br><span class="line">Enter password:  ****</span><br><span class="line">Verify password: ****</span><br><span class="line">[NotebookPasswordApp] Wrote hashed password to &#x2F;Users&#x2F;you&#x2F;.jupyter&#x2F;jupyter_notebook_config.json</span><br><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">修改配置文件</span><br><span class="line">在 jupyter_notebook_config.py 中找到下面的行，取消注释并修改。</span><br><span class="line"></span><br><span class="line">c.NotebookApp.ip&#x3D;&#39;*&#39;       #在所有的网卡接口上开启服务</span><br><span class="line">c.NotebookApp.port &#x3D;8888 #可自行指定一个端口, 访问时使用该端口1234</span><br><span class="line">c.NotebookApp.allow_remote_access &#x3D; True  #允许远程</span><br><span class="line">————————————————</span><br><span class="line">版权声明：本文为CSDN博主「Matrix-yang」的原创文章，遵循CC 4.0 BY-SA版权协议，转载请附上原文出处链接及本声明。</span><br><span class="line">原文链接：https:&#x2F;&#x2F;blog.csdn.net&#x2F;qq_21768483&#x2F;java&#x2F;article&#x2F;details&#x2F;82943250</span><br></pre></td></tr></table></figure>

<h2 id="mac-java安装位置"><a href="#mac-java安装位置" class="headerlink" title="mac java安装位置"></a>mac java安装位置</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">您可以echo $(&#x2F;usr&#x2F;libexec&#x2F;java_home)在终端中使用命令来了解安装Java的路径。</span><br></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>技术杂谈</tag>
      </tags>
  </entry>
</search>
